# Reverse proxy for MinIO based on https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-proxy
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio-proxy
  template:
    metadata:
      labels:
        app: minio-proxy
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
          - containerPort: 80
        volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-conf
        configMap:
          name: minio-proxy-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-proxy-config
  namespace: kubeflow
data:
  nginx.conf: |-
    upstream minio {
      server kubeflex-control-plane:NODE_PORT;
    }

    server {
      listen       80;
      listen  [::]:80;
      server_name  minio-service.kubeflow;

      # Allow special characters in headers
      ignore_invalid_headers off;
      # Allow any size file to be uploaded.
      # Set to a value such as 1000m; to restrict file size to a specific value
      client_max_body_size 0;
      # Disable buffering
      proxy_buffering off;
      proxy_request_buffering off;

      location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;

        proxy_pass http://minio; # This uses the upstream directive definition to load balance
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: kubeflow
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 80
  selector:
    app: minio-proxy
  sessionAffinity: None
  type: ClusterIP
